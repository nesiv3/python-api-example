import logging
import os
from typing import Any, Dict, List, Optional, Union

from dotenv import load_dotenv
from openai import AzureOpenAI

from utils.singleton import singleton

# Configurar logging
logging.basicConfig(level=logging.INFO)


# Cargar variables de entorno
load_dotenv()

@singleton
class AzureOpenAIClientService:
    """
    Servicio singleton para interactuar con Azure OpenAI API.
    Gestiona la conexión y proporciona métodos para generar completions.
    """
    
    def __init__(self, endpoint: Optional[str] = None, api_key: Optional[str] = None, 
                 api_version: Optional[str] = None):
        """
        Inicializa un cliente para Azure OpenAI Service.
        
        Args:
            endpoint (str, optional): El endpoint de Azure OpenAI. 
            api_key (str, optional): La clave de API de Azure OpenAI.
            api_version (str, optional): La versión de la API.
        """
        # Priorizar parámetros explícitos, luego variables de entorno, y finalmente valores por defecto
        self.endpoint = endpoint or os.getenv("AZURE_OPENAI_ENDPOINT", "https://pruebaniv.openai.azure.com/")
        self.api_key = api_key or os.getenv("AZURE_OPENAI_API_KEY", "4QMTcJ1L7k2C28S1QyvJA1qCzhw1PvKpHseWUOGmBPdjYdHEoVqSJQQJ99BDACYeBjFXJ3w3AAABACOGPDdV")
        self.api_version = api_version or os.getenv("AZURE_OPENAI_API_VERSION", "2025-01-01-preview")
        self.default_model = os.getenv("AZURE_OPENAI_DEFAULT_MODEL", "gpt-4o-mini")
        
        try:
            self.client = AzureOpenAI(
                api_version=self.api_version,
                azure_endpoint=self.endpoint,
                api_key=self.api_key,
            )
            print(f"AzureOpenAI client initialized successfully with endpoint: {self.endpoint}")
        except Exception as e:
            print(f"Failed to initialize AzureOpenAI client: {str(e)}")
            raise

    def generate_completion(self, 
                           user_prompt: str, 
                           system_prompt: Optional[str] = None, 
                           model: Optional[str] = None, 
                           max_tokens: int = 4096, 
                           temperature: float = 1.0, 
                           top_p: float = 1.0,
                           stop: Optional[Union[str, List[str]]] = None,
                           presence_penalty: float = 0.0,
                           frequency_penalty: float = 0.0) -> str:
        """
        Genera una respuesta a partir de un prompt del usuario.
        
        Args:
            user_prompt (str): El mensaje del usuario.
            system_prompt (str, optional): Instrucciones para el modelo.
            model (str, optional): El modelo a utilizar.
            max_tokens (int, optional): Número máximo de tokens a generar.
            temperature (float, optional): Valor de temperatura.
            top_p (float, optional): Valor de top_p.
            stop (Union[str, List[str]], optional): Secuencia(s) que detendrán la generación.
            presence_penalty (float, optional): Penalización por presencia.
            frequency_penalty (float, optional): Penalización por frecuencia.
            
        Returns:
            str: La respuesta generada por el modelo.
        """
        system_prompt = system_prompt or "You are a helpful assistant."
        model = model or self.default_model
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        try:
            print(f"Generating completion with model: {model}")
            response = self.client.chat.completions.create(
                messages=messages,
                model=model,
                max_tokens=max_tokens,
                temperature=temperature,
                top_p=top_p,
                stop=stop,
                presence_penalty=presence_penalty,
                frequency_penalty=frequency_penalty
            )
            return response.choices[0].message.content
        except Exception as e:
            print(f"Error generating completion: {str(e)}")
            raise

   